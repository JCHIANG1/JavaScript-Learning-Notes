//*object*//
/ we access the data in objects through properties(keys)
/ a JavaScript object is one way to handle flexible data. They allow for arbitrary combinations of strings, numbers, booleans, arrays, functions, and objects.
/ the sub-properties of objects can be accessed by chaining together the dot or bracket notation.

const anotherObject = {
  a1: "a2",  // if object has any non-string properties, JavaScript will automatically typecast them as strings.
  5: "five",
  "b1": "b2"
};

/ there are two ways to access the properties of an object: dot notation (.) and bracket notation ([]), similar to an array.
const myObj = {
  prop1: "val1",
  prop2: "val2"
};

const prop1val = myObj.prop1;
const prop2val = myObj.prop2;

/ bracket notation is required if your property has a space in it or if you want to use a variable to name the property
const prop1va3 = myObj["prop1"];
const prop2va4 = myObj["prop2]";

const test1 = "prop1"
const out = myObj[test1]
console.log(out1) // val1 will be the output

/ updating Object Properties
myObj.prop1 = "val3"
myObj[prop1] = "val3"

/ add New Properties to a JavaScript Object
myObj.prop3 = "val4"
myObj[prop3] = "val4"

/ delete Properties from a JavaScript Object
delete myObj.prop3;

/ wsing Objects for Lookups
function lookup(val) {
  let result = "";
  const lookup = {
    "a":"A",
    "b":"B",
    "c":"C",
    "d":"D",
    "e":"E",
    "f":"F"
  }
  result = lookup[val];
  return result;
}

lookup("c");

/ testing Objects for Properties: 
/ Object.hasOwnProperty(Property) returns true or false depending on whether the property is found on the object or not.
function checkPro(object,property){
  return object.hasOwnProperty(property)
};

checkPro({ top: 'hat', bottom: 'pants' }, 'top'); // true

/ in keyword
/ for example: If we have an object users with a property of Alan
users.hasOwnProperty('Alan');
'Alan' in users;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/ iterate Through the Keys of an Object with a for...in Statement

let foods = {
"apple":1,
"egg": 2
};

for (let food in foods){
console.log(foods[food]);
}; /1 /2

/ return the object keys
console.log(Object.keys(foods)) /["apple","egg"]


