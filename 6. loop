//* while loop *//

const testArray=[];
let i = 5;
while(i<=5 && i>=0){
  testArray.push(i);
  i--;
};

//* for loop *//
/ for (a; b; c),  where a is the initialization statement, b is the condition statement, and c is the final expression.
const testArray=[];
testLoop(){
for(let i=0;i<5;i++){
 testArray.push(i);
}
 return testArray;
};  
testLoop(); // [0,1,2,3,4]

const myArray = [];
for (let i=1; i<10; i+=2){
  myArray.push(i);
}; // [1,3,5,7,9]

const myArr = [2, 3, 4, 5, 6];
let total=0;
for (let i=0;i<myArr.length;i++){
 total+=myArr[i]
};

//* nested loop *//
const arr = [
  [1, 2], [3, 4], [5, 6]
];

for (let i = 0; i < arr.length; i++) {
  for (let j = 0; j < arr[i].length; j++) {
    console.log(arr[i][j]);
  }
}

//* do...while loop *//
/ what makes the do...while different from other loops is how it behaves when the condition fails on the first check. A do...while loop ensures that the code inside the loop will run at least once.

const myArray = []; 
let i = 5;

while(i<5){
myArray.push(i);
}; // the myArray is still =[]

do {
  ourArray.push(i);
  i++;
} while (i < 5); // the myArray is =[5]

/* replacing loops using recursion */
/ note: recursive functions must have a base case when they return without calling the function again, otherwise they can never finish executing.
/ write a recursive function, sum(arr, n), that returns the sum of the first n elements of an array arr.
function sum(arr, n) {
  if(n<=0){
    return 0;
  } else {
    return sum(arr,n-1)+arr[n-1];
  }
}
