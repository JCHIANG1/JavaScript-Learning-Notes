//* strings *// 
/It is common for developers to use uppercase variable identifiers for immutable values
/lowercase or camelCase for mutable values (objects and arrays)

/quoting strings with single quotes
const goodStr = ' A asks B, "Hey, let\'s go?"'; 
const badStr = 'B responds, "Let's go!"';

/In JavaScript, String values are immutable, they cannot be altered using the bracket notation once created.
/this would output error/
let myStr = "Bob";
myStr[0] = "J";

/this would pass/
let myStr1 = "Bob";
myStr1 = "Job";

/////////////////////////////////////////////////////////////////////////////////////////////////////////////

//* var vs let - string declaration *//

/var keyword -> you can easily overwrite variable declarations 
/this would pass/
var camper = "James";
var camper = "David";
console.log(camper);

/let keyword -> unlike var, when use let, a variable with the same name can only be declared once. 
/this would fail/
let camper1 = "James";
let camper1 = "David";

/this would fail/
const constVariable = 'test1';
const constVariable = 'test2';
console.log(constVariable);

//* scoping *//
/due to the use of var, the variable is not block-scoped and will be accessible outside the block
/this would pass/
if (true){
    var varVariable = 'this is var';
}
console.log(varVariable); /'this is var'

if (true){
    var varVariable = 'test1'
}
var varVariable = 'test2'
console.log(varVariable); /'test2'

/ block-scoping: When declare a variable with the let keyword inside a block, statement, or expression, its scope is limited to that block, statement, or expression.
/this would return errors/
if (true){
    let letVariable = 'this is let';
}
console.log(letVariable);

/this would return errors/
if (true){
    const constVariable = 'this is const';
}
console.log(constVariable);


//* const vs let - objects declaration *//
/objects (including arrays and functions) assigned to a variable using const are still mutable. Using the const declaration only prevents reassignment of the variable identifier.
const s = [5, 6, 7];
s = [1, 2, 3]; /this would failed, s can't be reassigned 
s[2] = 45;
console.log(s); /[5, 6, 45]

/ const has all the features that let has, with the added bonus that variables declared using const are read-only. They are a constant value, which means that once a variable is assigned with const, it cannot be reassigned
const FAV_PET = "Cats";
FAV_PET = "Dogs"; /this would return error

/ freeze the object to prevent the mutation
/ const declaration alone doesn't really protect data from mutation. To ensure your data doesn't change, JavaScript provides a function Object.freeze to prevent data mutation.

/const allow update the properties/
const constVar = {name:'Bob'};
constVar.name = 'Sally';
console.log(constVar.name); /Sally

const obj{
a:"abc",
b:"cde"
};
Object.freeze(obj);
obj.a="cd" / this would return error

/ Valid, can reassign the variable to a new array
let myArray = [1, 2, 3];
myArray = [4, 5, 6];

/////////////////////////////////////////////////////////////////////////////////////////////////////////////

/ easily increment or add one to a variable
i++; 
/ is the equivalent of
i = i + 1;

/ decrement or decrease a variable 
i--;;
i=i-1;

/ + -  x / all applies to the below rule
a = a + 12;
/ is the equivalent of
a +=12
























