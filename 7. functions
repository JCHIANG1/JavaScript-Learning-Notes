//* functions *//

function testFunction() {
  console.log('Hello World');
}

/ all of the code between the curly braces will be executed every time the function is called.
testFunction();

//* function with arguments *//
function functionWithArgs(a,b){
  console.log(a+b);
};

functionWithArgs(3,5); /8

//* return: use a return statement to send a value back out of a function.*//
/a function timesFive that accepts one argument, multiplies it by 5, and returns the new value.
function timesFive(a) {
  return a*5;
};

//* Scoping *//
/ In JavaScript, scope refers to the visibility of variables. Variables defined outside of a function block have Global scope. 
/ Variables that are declared WITHOUT the let or const keywords are automatically created in the global scope.
/ Variables declared within a function, as well as the function parameters, have local scope. They are only visible within that function.

let myGlobal =10;  /global
function fun1() {
  oopsGlobal = 5 /global

}
console.log(oopsGlobal) /5

/this would return error/
function myLocalScope() {
  let myVar = 'here';
  console.log('inside myLocalScope', myVar);
}
console.log(myVar) 

/When local & global variables have the same name the LOCAL variable takes precedence over the GLOBAL variable.
const outerWear = "Shirt";
function myOutfit() {
  outerWear = "t-Shirt";
  return outerWear;
}
myOutfit(); // the output should be "t-Shirt"

/When the function doesn't have a return statement, when you call it, the function processes the inner code, the function will change the global variable but the returned value of the function is undefined.
let sum = 0;
function addSum(num) {
  sum += num;
}
addSum(3);
console.log(sum); /3

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


// Math.random() ->  function that generates a random decimal number between 0 (inclusive) and 1 (exclusive). 
function randomFraction() {
  return Math.random();
}

//Math.floor() function -> round number down to its nearest whole number.

//parseInt() function parses a string and returns an integer. If the first character in the string can't be converted into a number, then it returns NaN.
// it takes a second argument for the radix, which specifies the base of the number in the string. The radix can be an integer between 2 and 36.

