/* strings */ 
/ It is common for developers to use uppercase variable identifiers for immutable values
/ lowercase or camelCase for mutable values (objects and arrays)

/ quoting strings with single quotes
const goodStr = ' A asks B, "Hey, let\'s go?"'; 
const badStr = 'B responds, "Let's go!"';

/ let */ 
/In JavaScript, String values are immutable, they cannot be altered using the bracket notation once created.
/this would output error/
let myStr = "Bob";
myStr[0] = "J";

/this would pass/
let myStr1 = "Bob";
myStr1 = "Job";

/* var vs let */
/this would pass/
/ var keyword -> you can easily overwrite variable declarations /
var camper = "James";
var camper = "David";
console.log(camper);

/this would failed/
/ let keyword -> unlike var, when use let, a variable with the same name can only be declared once. /
let camper1 = "James";
let camper1 = "David";

/ When declare a variable with var, it is declared globally, or locally if declared inside a function.
/ When declare a variable with let, it behaves similarly, but with some extra features. When declare a variable with the let keyword inside a block, statement, or expression, its scope is limited to that block, statement, or expression.

/* const vs let */
/objects (including arrays and functions) assigned to a variable using const are still mutable. Using the const declaration only prevents reassignment of the variable identifier.
const s = [5, 6, 7];
s = [1, 2, 3]; /this would failed, s can't be reassigned 
s[2] = 45;
console.log(s); /[5, 6, 45]

/ const has all the features that let has, with the added bonus that variables declared using const are read-only. They are a constant value, which means that once a variable is assigned with const, it cannot be reassigned
const FAV_PET = "Cats";
FAV_PET = "Dogs"; /this would return error

/ freeze the object to prevent the mutation
/ const declaration alone doesn't really protect data from mutation. To ensure your data doesn't change, JavaScript provides a function Object.freeze to prevent data mutation.
let obj{
a:"abc",
b:"cde"
};
Object.freeze(obj);
obj.a="cd" / this would return error



/ easily increment or add one to a variable
i++; 
/ is the equivalent of
i = i + 1;

/ decrement or decrease a variable 
i--;;
i=i-1;

/ + -  x / all applies to the below rule
a = a + 12;
/ is the equivalent of
a +=12
























