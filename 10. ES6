/*  the rest parameter for function parameters */
function howMany(...args) {
  / for this example, we can ignore the line to define the args within the function 
  return "You have passed " + args.length + " arguments.";
}
console.log(howMany(0, 1, 2));
console.log(howMany("string", null, [1, 2, 3], { }));


/* spread operator */  to expand arrays and other expressions in places where multiple parameters or elements are expected.
/ ...arr returns an unpacked array. It spreads the array, it only works in an argument to a function or in an array literal.
const arr = [1,2,3,4];
/ this would pass 
const test = [...arr];
/ this would fail
const test2 = ...arr;

/ if we use write Math.max(arr) it will returns NaN bc Math.max() expects comma-separated arguments, not an array
/ we can use the spread operator to overcome this.
const max1 = Math.max(...arr); 
/ ES5
const max2 = Math.max.apply(null,arr); 

/ spread operator vs destructuring arrays assignment 
/ the spread operator unpacks all contents of an array into a comma-separated list. But we cannot pick or choose which elements you want to assign to variables.
/ but destructuring an array lets us do that
const [a, b] = [1, 2, 3, 4, 5, 6];
console.log(a, b); /1,2
const [a, b,,, c] = [1, 2, 3, 4, 5, 6];
console.log(a, b, c); / 1, 2, 5






/* destructuring syntax */

/ example#1
/ ES5
const user = { name: 'John', age: 30 };
const name = user.name;
const age = user.age;
/ ES6 ->  the name and age variables will be created and assigned the values of their respective values from the user object.
const {name,age} = user;

/ example#2
/ assign a new variable name when extracting values. 
const {name: new_name, age: new_age} = user;

/ example#3
/ assign variables from nested objects

const user2 = {
  john: { 
    age: 34,
    email: 'johnDoe@'
  }
};
/ extract the values of object properties and assign them to variables with the same name
const {john: {age,email} }= user2;
/  assign an object properties' values to variables with different names
const {john: {age: new_age2, email: new_email} } = user2;

/ example#4
/ destructuring via rest elements: we might want to collect the rest of the elements into a separate array.
const [a, b, ...arr] = [1, 2, 3, 4, 5, 7];
console.log(a, b); /1,2
console.log(arr);  /3, 4, 5, 7

/ example#5
/ use destructuring assignment to pass an object as a function's parameters
const profile = function (profileData) {
  const name = profileData.name;
  const age = profileData.age;
  const nationality = profileData.nationality;
  const location = profileData.location;
};
/ the above code it's equivalent as 
const profile = (profileData) => {
  const { name, age, nationality, location } = profileData;
}
/ the above code it's equivalent as 
const profile = ({ name, age, nationality, location }) => {}
profile(profileData)

/ example#5-1
const stats = {
  max: 5,
  standard_deviation: 4,
  median: 3,
  mode: 2,
  min: 0
};
const half = (stats) => (stats.max + stats.min) / 2.0;
/ the above function it's equivalent as 
const half = ({max,min}) => (max+min)/2.0;
half(stats);


/*Template Literals*/

const person{
name:"RC",
age:"100"
};

const sayHi = `Hi, my name is ${person.name}.
I'm ${person.age} year old.`; /backticks not quotes, the string is multi-line, both in the code and the output. This saves inserting \n within strings

console.log(sayHi); 


