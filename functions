/* functions */

function testFunction() {
  console.log('Hello World');
};

// All of the code between the curly braces will be executed every time the function is called.
testFunction();

//function with arguments
function functionWithArgs(a,b){
  console.log(a+b);
};

functionWithArgs(3,5);

//return: use a return statement to send a value back out of a function.
//a function timesFive that accepts one argument, multiplies it by 5, and returns the new value.
function timesFive(a) {
  return a*5;
};


// In JavaScript, scope refers to the visibility of variables. Variables defined outside of a function block have Global scope. 
// Variables that are declared without the let or const keywords are automatically created in the global scope.

let myGlobal =10;

function fun1() {
  oopsGlobal = 5// Assign 5 to oopsGlobal here

}

//Variables declared within a function, as well as the function parameters, have local scope. They are only visible within that function.

function myLocalScope() {
  let myVar = 'here';
  console.log('inside myLocalScope', myVar);
}
myLocalScope();

// myVar is not defined outside of myLocalScope
console.log('outside myLocalScope', myVar);
