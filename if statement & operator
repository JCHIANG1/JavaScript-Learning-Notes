//*Conditional Logic with If Statements*//

function testIf(myCondition){
    if (myCondition){
      return "myCondition is true" ;
    }
    return "myCondition is false"; 
};

testIf(true); // return "myCondition is true" 
testIf(false); // return  "myCondition is false" 


//typeof
typeof 3; //number
typeof '3'; //string


//the Equality Operator (==) If the values being compared are not of the same type, the equality operator will perform a type conversion, and then evaluate the values

// true -> 1   ==  1  
// false ->  1   ==  2 
// true ->  1   == '1' // true
// true ->  "3" ==  3  // true

function equaltest(num){
   if (num == 12){
     return 'True';
   }
   return 'False';
}
 equaltest(10);

//the Strict equality ===, it does not perform a type conversion. If the values being compared have different types, they are considered unequal, and the strict equality operator will return false.
// true ->  3 ===  3  
// false -> 3 === '3' 


// inequality operator (!=) Like the equality operator, the inequality operator will convert data types of values while comparing.
// true ->  1 !=  2    
// false -> 1 != "1"  
// false -> 1 != '1'   
// false -> 1 != true  
// false -> 0 != false 

// strict inequality operator (!==)
// false -> 3 !==  3  
// true ->  3 !== '3' 
// true ->  4 !==  3 

// greater than operator (>) Like the equality operator, the greater than operator will convert data types of values while comparing.
// true ->  5   >  3
// true ->  7   > '3' 
// false -> 2   >  3  
// false -> '1' >  9 

function testGreaterThan(val) {
  if (val>100) { 
    return "Over 100";
  }
  if (val>10) { 
    return "Over 10";
  }
  return "10 or Under";
}

testGreaterThan(10);

//Like the equality operator, the below 3 operators will convert data types while comparing:
//The greater than or equal to operator (>=) 
//The less than operator (<) 
//The less than or equal to operator (<=) 

////Here is the pseudocode of the logical and operator (&&)
if (num > 5) {
   if (num < 10){
      return true;
   }
}
return false;

// can be written as
if (num > 5 && num < 10) {
  return true;
}
return false;

// The logical or operator (||) returns true if either of the operands is true. Otherwise, it returns false.

//if...else: Order is important in if, else if statements. The function is executed from top to bottom.
//Here is the pseudocode of multiple chained if / else if statements:
if (condition1) {
  statement1
} else if (condition2) {
  statement2
} else if (condition3) {
  statement3
. . .
} else {
  statementN
}

function testElse(val) {
  let result = "";
  if (val > 5) {
    result = "Bigger than 5";
  } else {
    result = "5 or Smaller";
  }
  return result;
};

testElse(4);

// if...else if.... else

function testElseIf(val) {
  if (val > 10) {
    return "Greater than 10";
  }
  else if (val < 5) {
    return "Smaller than 5";
  }
  else {
     return "Between 5 and 10";
  }
};

testElseIf(7);

