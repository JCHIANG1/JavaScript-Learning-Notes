
//* arrays *// 

/ one-dimensional array 
/ it only has one level, or that it does not have any other arrays nested within it

let simpleArray = ['one', 2, 'three', true, false, undefined, null];

/ multi-dimensional array 
/ an array that contains other arrays or objects
let complexArray = [
  [
    {
      one: 1,
      two: 2
    },
    {
      three: 3,
      four: 4
    }
  ]
];

const teams = [["Bulls", 23], ["White Sox", 45]];

/ a length property
console.log(simpleArray.length);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/unlike strings, the entries of arrays are mutable and can be changed freely, even if the array was declared with const
const myArray = [18, 64, 99];
myArray[0]=45;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/push()
const myArray = [[1, 23], [2, 2]];
myArray.push(["dog", 3]);

/pop() removes the last element of an array
const myArray = [[1, 23], [2, 2]]; 
const removedFromMyArray = myArray.pop();
console.log(myArray)
console.log(removedFromMyArray)

/shift() It works just like .pop(), except it removes the first element instead of the last.
const myArray = [[1, 23], [2, 2]]; 
const removedFromMyArray = myArray.shift();
console.log(const myArray);
console.log(removedFromMyArray);

/unshift() works exactly like .push(), but instead of adding the element at the end of the array, unshift() adds the element at the beginning of the array.
const myArray = [[1, 23], [2, 2]]; 
myArray.unshift( "Paul");

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

