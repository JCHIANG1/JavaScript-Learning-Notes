//* arrays *// 

/ one-dimensional array 
/ it only has one level, or that it does not have any other arrays nested within it

let simpleArray = ['one', 2, 'three', true, false, undefined, null];

/ multi-dimensional array 
/ an array that contains other arrays or objects
let complexArray = [
  [
    {
      one: 1,
      two: 2
    },
    {
      three: 3,
      four: 4
    }
  ]
];

const teams = [["Bulls", 23], ["White Sox", 45]];

/ a length property
console.log(simpleArray.length);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/unlike strings, the entries of arrays are mutable and can be changed freely, even if the array was declared with const
const myArray = [18, 64, 99];
myArray[0]=45;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/push() push the element into the end of the array 
const myArray = [[1, 23], [2, 2]];
myArray.push(["dog", 3]);

/pop() removes the last element of an array
const myArray = [[1, 23], [2, 2]]; 
const removedFromMyArray = myArray.pop();
console.log(myArray)
console.log(removedFromMyArray)

/shift() It works just like .pop(), except it removes the first element instead of the last.
const myArray = [[1, 23], [2, 2]]; 
const removedFromMyArray = myArray.shift();
console.log(const myArray);
console.log(removedFromMyArray);

/unshift() works exactly like .push(), but instead of adding the element at the end of the array, unshift() adds the element at the beginning of the array.
const myArray = [[1, 23], [2, 2]]; 
myArray.unshift( "Paul");

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/splice() remove any number of consecutive elements from anywhere in an array.
/ can take up to 3 parameters
/ the first parameter represents the index on the array from which to begin removing elements, while the second parameter indicates the number of elements to delete.
let test = [1,2,3,4,5]
new = test.splice(2,2)  
console.log(new) / [3,4]

/ other examples, utilizing the 3rd parameter
const num = [1,2,3,4,5]
const startIndex = 0
const amountDelete = 3
newNum = num.splice(startIndex,amountDelete,1,2,3)
console.log(newNum) /[1,2,3,4,5]

/slice()
/ it copies or extracts a given number of elements to a new array
/ it takes 2 parameters â€” the 1st is the index at which to begin extraction, and the 2nd is the index at which to stop extraction
let weatherConditions = ['rain', 'snow', 'sleet', 'hail', 'clear'];
let todaysWeather = weatherConditions.slice(1, 3);
console.log(todaysWeather ) / ['snow', 'sleet']
console.log(weatherConditions) /['rain', 'snow', 'sleet', 'hail', 'clear']


