
//* Promise *//
/ we use it to make a promise to do something. When the task completes, we either fulfill promise or fail to do so. 
/ Promise is a constructor function, so we need to use the new keyword to create one. 
/ It takes a function, as its argument, with two parameters - resolve and reject. These are methods used to determine the outcome of the promise. 

const testPromise = new Promise((resolve,reject) => {});

/ a promise has three states: pending, fulfilled, and rejected.
/ the above testPromise is under the pending state, bc we did not add a way to complete the promise. 
/ resolve is used when we want the promise to succeed, and reject is used when we want it to fail. 

const testPromise2 = new Promise((resolve,reject) => {
  if (SOME CONDITION){
      resolve("Promise was fulfilled");  /it can really be anything. Often, it might be an object
   } else {
      reject("Promise was rejected");
     }
});

/ then method
/ the then method is executed immediately after the promise is fulfilled with resolve
/ result comes from the argument given to the resolve method
testPromise2.then(result => {
console.log(result);    / Promise was fulfilled
}).catch(error => {
console.log(error) / Promise was rejected
});
/ catch method
/ catch is used when the promise has been rejected. It is executed immediately after a promise's reject method
/ error is the argument passed in to the reject method.
testPromise2



