
//* Promise *//
/ we use it to make a promise to do something. When the task completes, we either fulfill promise or fail to do so. 
/ Promise is a constructor function, so we need to use the new keyword to create one. 
/ It takes a function, as its argument, with two parameters - resolve and reject. These are methods used to determine the outcome of the promise. 

const testPromise = new Promise((resolve,reject) => {});

/ a promise has three states: pending, fulfilled, and rejected.
/ the above testPromise is under the pending state, bc we did not add a way to complete the promise. 
/ resolve is used when we want the promise to succeed, and reject is used when we want it to fail. 

const testPromise2 = new Promise((resolve,reject) => {
  if (SOME CONDITION){
      resolve("Promise was fulfilled");  /it can really be anything. Often, it might be an object
   } else {
      reject("Promise was rejected");
     }
});

/ then method
/ the then method is executed immediately after the promise is fulfilled with resolve
/ result comes from the argument given to the resolve method

/ catch method
/ catch is used when the promise has been rejected. It is executed immediately after a promise's reject method
/ error is the argument passed in to the reject method.
testPromise2

testPromise2.then(result => {
console.log(result);                      / Promise was fulfilled
}).catch(error => {
console.log(error)                        / Promise was rejected
});

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//* async functions *//
/ An async function is a function that implicitly returns a promise.
/ It allows the use of the await keyword within the function to wait for the promise to resolve or reject. The try-catch block is used for error handling.
/ async and await are features in JavaScript that simplify working with asynchronous code, making it more readable and easier to reason about.

/ Example without async and await:
function fetchData(){
   return fetch('https://api.example.com/data')
      .then(response => response.json())
      .then(data => console.log(data))
      .catch(error => console.error(error));
}

/ Equivalent example with async and await:
async function fetchData(){
   try{
     const response = await fetch('https://api.example.com/data');        
     const data = await response.json();
     console.log(data);
   }catch(error){
     console.error(error);
   }
}

/to execute the async function
fetchData()

/ await can be used to pause the execution of an async function until the awaited promise is resolved. 
/ the line const response = await fetch('https://api.example.com/data'); will pause the execution of the async function until the fetch operation is complete and the promise is resolved
/ once the promise is resolved, the code will proceed to the next line.
/ If the fetch call is rejected (e.g., due to a network error or if the server responds with an error status), it will skip the const data = await response.json(); line and jump directly to the catch block.




















